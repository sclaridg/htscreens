ccl_info$Histology <- tolower(gsub("^[a-z0-9]*_", "", ccl_info$CCLE_Name, ignore.case = TRUE))
# Convert Primary.Disease entries to all lower case to fix factorization issue
ccl_info$Primary.Disease <- as.factor(tolower(ccl_info$Primary.Disease))
# Harmonize ID column name
colnames(ccl_info)[colnames(ccl_info) == "DepMap_ID"] <- "Broad_ID"
ccl_info <- subset(ccl_info, Cell_line != "KMH2" & Histology != "thyroid")
ccl_info <- read.delim("./data_munging/19Q1/DepMap-2019q1-celllines_v2_20190305.csv", sep = ",", header = TRUE, na.strings = c("", NA))
ccl_info <- subset(ccl_info, Primary.Disease != "unknown" & Primary.Disease != "primary cells" & !grepl("MERGED", CCLE_Name, fixed = TRUE))
ccl_info$Cell_line <- as.character(lapply(ccl_info$CCLE_Name, function(x) strsplit(as.character(x), split = "_")[[1]][1]))
ccl_info$Histology <- tolower(gsub("^[a-z0-9]*_", "", ccl_info$CCLE_Name, ignore.case = TRUE))
# Convert Primary.Disease entries to all lower case to fix factorization issue
ccl_info$Primary.Disease <- as.factor(tolower(ccl_info$Primary.Disease))
# Harmonize ID column name
colnames(ccl_info)[colnames(ccl_info) == "DepMap_ID"] <- "Broad_ID"
# Remove two rows that contain cell lines with two different histologies
# The histologies that are kept are verified through matching in Cellosaurus and Cell Model Passports
# KMH2: https://web.expasy.org/cellosaurus/CVCL_1330, https://cellmodelpassports.sanger.ac.uk/passports/SIDM01018
# MS1: https://web.expasy.org/cellosaurus/CVCL_1429, https://cellmodelpassports.sanger.ac.uk/passports/SIDM00245
ccl_info <- subset(ccl_info, CCLE_Name != "KMH2_THYROID" & CCLE_Name != "MS1_SKIN")
tcga_hist_converter <- read.xlsx("./data_munging/TCGA/Histology_DepMap_Xena_04052019.xlsx", sheet = 3, startRow = 1, colNames = TRUE, rowNames = FALSE)
tcga_hist_converter$data_source <- NULL
tcga_hist_converter_depmap <- filter(tcga_hist_converter, grepl("^ACH", sample_ID))
tcga_hist_converter_tcga <- filter(tcga_hist_converter, grepl("^TCGA", sample_ID))
colnames(tcga_hist_converter_depmap) <- c("Broad_ID", "TCGA_classification")
colnames(tcga_hist_converter_tcga) <- c("sample", "TCGA_classification")
ccl_info <- merge(ccl_info, tcga_hist_converter_depmap, by = "Broad_ID", all.x = TRUE)
# Sample info from figshare
crispr_meta <- read.delim("./data_munging/19Q1/sample_info_20190306.csv", sep = ",", header = TRUE, na.strings = c("", NA))
colnames(crispr_meta)[colnames(crispr_meta) == "CCLE_name"] <- "CCLE_Name"
# crispr <- read.delim("./data_munging/19Q1/gene_effect_corrected_20190305.csv.gz", sep = ",", check.names = FALSE, header = TRUE)
ccl_histologies <- select(ccl_info, Cell_line, Histology, TCGA_classification, CCLE_Name, Broad_ID) %>% drop_na(Cell_line)
# Account for cell line aliases and missing histologies
auc_na_histologies <- read.delim("./data_munging/pozdeyev2016/auc_na_histologies.csv", sep = ",", row.names = 1)
auc_na_histologies$accession_id <- NULL
auc_na_histologies$Notes <- NULL
auc_na_histologies$Histology <- ifelse(auc_na_histologies$Histology == "", NA, as.character(auc_na_histologies$Histology))
auc_na_histologies$CCLE_Name <- ifelse(auc_na_histologies$CCLE_Name  == "", NA, as.character(auc_na_histologies$CCLE_Name ))
auc_na_histologies$Broad_ID <- ifelse(auc_na_histologies$Broad_ID == "", NA, as.character(auc_na_histologies$Broad_ID))
ccl_histologies <- subset(ccl_histologies, !(Broad_ID %in% auc_na_histologies$Broad_ID))
# Bind DepMap histologies and curated histologies
ccl_histologies <- bind_rows(ccl_histologies, auc_na_histologies)
auc <- bind_rows(ccle_poz, ctrp_poz, gdsc_poz)
# Harmonize Pozdeyev cell line names with DepMap
auc$Cell_line <- toupper(gsub("-", "", auc$Cell_line))
auc$Cell_line <- ifelse(auc$Cell_line == "K052", "KO52", auc$Cell_line)
auc$Cell_line <- ifelse(auc$Cell_line == "OVCAR3", "NIHOVCAR3", auc$Cell_line)
auc$Cell_line <- ifelse(auc$Cell_line == "OVCAR3", "NIHOVCAR3", auc$Cell_line)
auc$Cell_line <- ifelse(auc$Cell_line == "TI73", "T173", auc$Cell_line)
auc <- merge(ccl_histologies, auc, by = "Cell_line", all.y = TRUE)
auc$WasDrugScreened <- 1
ccls_not_drugscreened <- filter(ccl_histologies, Cell_line %in% setdiff(ccl_histologies$Cell_line, auc$Cell_line))
ccls_not_drugscreened$WasDrugScreened <- 0
auc$AUC_IC50 <- as.numeric(as.character(auc$AUC_IC50))
# auc$sample_ID <- with(auc, paste(Database, Cell_line, Histology, sep = "_"))
auc$Drug_name_Database <- with(auc, paste(Drug_name, Database, sep = "_"))
num_auc_per_db <- auc %>% count(Database)
# Identify cell lines without histology indications. Write to file to edit for merging back to ccl_histologies file
# test <- filter(auc, is.na(Histology))[, 1:10]
# auc_na_hists <- unique(filter(auc, is.na(Histology))$Cell_line)
# write.csv(auc_na_hists, "./data_munging/pozdeyev2016/auc_na_histologies.csv")
# Create merged dataset with sample_ids in the rows and drugs across the columns
auc_wide <- dcast(auc, Cell_line + Histology + CCLE_Name + Broad_ID + WasDrugScreened ~ Drug_name_Database, value.var = "AUC_IC50", fun.aggregate = mean, fill = 1000000)
auc_wide[auc_wide == 1000000] <- ""
# auc_wide <- auc_wide %>% group_by(Cell_line, Histology, CCLE_Name, Broad_ID, WasDrugScreened) %>% summarise_all(list(trimws(paste(., collapse = ""))))
auc_wide[auc_wide == ""] <- NA
auc_all <- bind_rows(auc_wide, ccls_not_drugscreened)
auc_all <- add_column(auc_all, InCCLE = ifelse(auc_all$Cell_line %in% unique(ccle_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, InCTRP = ifelse(auc_all$Cell_line %in% unique(ctrp_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, InGDSC = ifelse(auc_all$Cell_line %in% unique(gdsc_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, WasCRISPRScreened = ifelse(auc_all$Broad_ID %in% crispr_meta$Broad_ID, 1, 0), .after = "WasDrugScreened")
auc_all <- add_column(auc_all, HasCopyNumberData = ifelse(auc_all$Broad_ID %in% unique(cn_melt$Broad_ID)[!is.na(unique(cn_melt$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
auc_all <- add_column(auc_all, HasGeneExpressionData = ifelse(auc_all$Broad_ID %in% unique(ge_melt$Broad_ID)[!is.na(unique(ge_melt$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
auc_all <- add_column(auc_all, HasMutationData = ifelse(auc_all$Broad_ID %in% unique(maf_df$Broad_ID)[!is.na(unique(maf_df$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
# auc_all[, -c(1:4)] <- apply(auc_all[, -c(1:4)], MARGIN = 2, FUN = as.numeric)
auc_all <- subset(auc_all, !(WasDrugScreened == 0 & WasCRISPRScreened == 0 & HasMutationData == 0 & HasGeneExpressionData == 0 & HasCopyNumberData == 0))
write.csv.gz(auc_all, file = "./data_munging/pozdeyev2016/merged_auc_v20190408.5.csv.gz", row.names = FALSE, na = "NA")
auc_all <- read.delim("./data_munging/pozdeyev2016/merged_auc_v20190408.5.csv.gz", sep = ",", check.names = FALSE)
# Unique drugs across all datasets
length(unique(sapply(strsplit(as.character(colnames(auc_all)[13:length(colnames(auc_all))]), split = "_"), function(x) x[1])))
sum(auc_all$HasCopyNumberData)
sum(auc_all$HasMutationData)
sum(auc_all$HasGeneExpressionData)
sum(auc_all$WasDrugScreened)
test <- filter(auc_all, HasMutationData == 1)[, 1:12]
pgx_ccls <- filter(auc_all, WasDrugScreened == 1)
crispr_ccls <- filter(auc_all, WasCRISPRScreened == 1)
unscreened_ccls <- filter(auc_all, WasCRISPRScreened == 0 & WasDrugScreened == 0)
ge_ccls <- filter(auc_all, HasGeneExpressionData == 1)
cn_ccls <- filter(auc_all, HasCopyNumberData == 1)
mut_ccls <- filter(auc_all, HasMutationData == 1)
all_omics_ccls <- intersect(intersect(unique(ge_ccls$Cell_line), unique(cn_ccls$Cell_line)), unique(mut_ccls$Cell_line))
sum(filter(auc_all, Cell_line %in% all_omics_ccls)$WasDrugScreened)
ccle_ccls <- filter(auc_all, InCCLE == 1)
ctrp_ccls <- filter(auc_all, InCTRP == 1)
gdsc_ccls <- filter(auc_all, InGDSC == 1)
auc_all %>% count(Histology)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn_pgx_crispr_overlap <- venn.diagram(list("CRISPR" = unique(crispr_ccls$Cell_line), "Drug Screen" = unique(pgx_ccls$Cell_line), "Unscreened" = unique(unscreened_ccls$Cell_line)), resolution = 5000, main = "Overlap of cancer cell lines (CCLs) screened via small-molecule and CRISPR", main.fontface = "bold", lty = rep("blank", 3), fill = c("mediumpurple1", "turquoise4", "slategray3"), alpha = c(0.5, 0.5, 0.5), cat.pos = c(-30, 30, 180), cat.dist = c(0.01, 0.001, 0.001), cat.cex = 1.5, cex = 1, filename = NULL)
png("./gcn_denise/pozdeyev_unmatched/venn_pgx_crispr_overlap.png", res = 500, units = "in", width = 6, height = 6)
grid.newpage()
grid.draw(venn_pgx_crispr_overlap)
dev.off()
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn_pgx_crispr_overlap <- venn.diagram(list("CRISPR" = unique(crispr_ccls$Cell_line), "Drug Screen" = unique(pgx_ccls$Cell_line), "Unscreened" = unique(unscreened_ccls$Cell_line)), resolution = 5000, main = "Overlap of cancer cell lines (CCLs) screened via small-molecule and CRISPR", main.fontface = "bold", lty = rep("blank", 3), fill = c("mediumpurple1", "turquoise4", "slategray3"), alpha = c(0.5, 0.5, 0.5), cat.pos = c(-30, 30, 180), cat.dist = c(0.01, 0.001, 0.001), cat.cex = 1.5, cex = 1, filename = NULL)
png("./omix/pozdeyev_unmatched/venn_pgx_crispr_overlap.png", res = 500, units = "in", width = 6, height = 6)
grid.newpage()
grid.draw(venn_pgx_crispr_overlap)
dev.off()
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn_ccl_overlap <- venn.diagram(list("CCLE" = unique(ccle_ccls$Cell_line), "CTRP" = unique(ctrp_ccls$Cell_line), "GDSC" = unique(gdsc_ccls$Cell_line)), resolution = 5000, main = "Overlap of cancer cell lines (CCLs) screened in each dataset", main.fontface = "bold", lty = rep("blank", 3), fill = c("springgreen4", "steelblue4", "turquoise4"), alpha = c(0.5, 0.5, 0.5), cat.pos = c(-30, 30, 180), cat.dist = c(0.01, 0.001, 0.001), cat.cex = 1.5, cex = 1, filename = NULL)
png("./omix/pozdeyev_unmatched/venn_ccl_overlap.png", res = 500, units = "in", width = 6, height = 6)
grid.newpage()
grid.draw(venn_ccl_overlap)
dev.off()
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn_omics_overlap <- venn.diagram(list("Gene Expression" = unique(ge_ccls$Cell_line), "Copy Number" = unique(cn_ccls$Cell_line), "Mutation" = unique(mut_ccls$Cell_line)), resolution = 5000, main = "Overlapping omic annotations in cancer cell lines (CCLs)", main.fontface = "bold", lty = rep("blank", 3), fill = c("yellow2", "orange", "tomato"), alpha = c(0.5, 0.5, 0.5), cat.pos = c(-30, 30, 180), cat.dist = c(0.01, 0.001, 0.001), cat.cex = 1.5, cex = 1, filename = NULL)
png("./omix/pozdeyev_unmatched/venn_omics_overlap.png", res = 500, units = "in", width = 6, height = 6)
grid.newpage()
grid.draw(venn_omics_overlap)
dev.off()
bar_ccl_per_hist <- ggplot(data = unique(select(auc_all, Cell_line, Histology))) +
geom_bar(aes(x = Histology, fill = Histology), alpha = 0.7) +
guides(fill = "none") +
scale_y_continuous(breaks = seq(0, 300, by = 25), labels = seq(0, 300, by = 25)) +
labs(y = "Number of cell lines", title = "Number of unique cell lines per histology across all cell lines") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
bar_ccl_per_hist
ggsave("./omix/pozdeyev_unmatched/barplot_ccl_per_histology.png", bar_ccl_per_hist, device = "png", dpi = 450, width = 12, height = 6, units = "in")
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn_drugs_overlap <- venn.diagram(list("CCLE" = unique(ccle_poz$Drug_name), "CTRP" = unique(ctrp_poz$Drug_name), "GDSC" = unique(gdsc_poz$Drug_name)), resolution = 5000, main = "Overlap of cancer cell lines (CCLs) screened in each dataset", main.fontface = "bold", lty = rep("blank", 3), fill = c("springgreen4", "steelblue4", "turquoise4"), alpha = c(0.5, 0.5, 0.5), cat.pos = c(-30, 30, 180), cat.dist = c(0.01, 0.001, 0.001), cat.cex = 1.5, cex = 1, filename = NULL)
png("./omix/pozdeyev_unmatched/venn_drugs_overlap.png", res = 500, units = "in", width = 6, height = 6)
grid.newpage()
grid.draw(venn_drugs_overlap)
dev.off()
bar_ccl_per_hist_per_db <- ggplot(data = unique(select(auc, Database, Cell_line, Histology))) +
facet_wrap(~ Database) +
geom_bar(aes(x = Histology, fill = Histology), alpha = 0.7) +
guides(fill = "none") +
# coord_cartesian(ylim = c(0, 130)) +
scale_y_continuous(breaks = seq(0, 160, by = 20), labels = seq(0, 160, by = 20)) +
labs(y = "Number of cell lines", title = "Number of unique cell lines per histology, grouped by database") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
bar_ccl_per_hist_per_db
ggsave("./omix/pozdeyev_unmatched/barplot_ccl_per_histology_per_db.png", bar_ccl_per_hist_per_db, device = "png", dpi = 450, width = 12, height = 8, units = "in")
bar_ccl_per_hist <- ggplot(data = unique(select(auc_all, Cell_line, Histology))) +
geom_bar(aes(x = Histology, fill = Histology), alpha = 0.7) +
guides(fill = "none") +
scale_y_continuous(breaks = seq(0, 220, by = 20), labels = seq(0, 220, by = 20)) +
labs(y = "Number of cell lines", title = "Number of unique cell lines per histology across all annotated cell lines") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
bar_ccl_per_hist
ggsave("./omix/pozdeyev_unmatched/barplot_ccl_per_histology.png", bar_ccl_per_hist, device = "png", dpi = 450, width = 12, height = 8, units = "in")
histo_aucic50_per_db <- ggplot(data = auc) +
facet_wrap(~ Database, scales = "free_y") +
geom_histogram(aes(x = AUC_IC50, fill = Database), color = "black", alpha = 0.7, binwidth = 0.025, boundary = 0, closed = "left") +
scale_fill_manual(values = c("CCLE" = "springgreen4", "CTRP" = "steelblue4", "GDSC" = "turquoise4")) +
guides(fill = "none") +
labs(x = "AUC IC50", y = "Frequency", title = "Distributions of AUC IC50 values for all drugs in each dataset (unmatched)")
histo_aucic50_per_db
ggsave("./omix/pozdeyev_unmatched/histogram_aucic50_per_db.png", histo_aucic50_per_db, device = "png", dpi = 450, width = 12, height = 6, units = "in")
bar_ccl_per_hist <- ggplot(data = unique(select(auc_all, Cell_line, Histology))) +
geom_bar(aes(x = Histology, fill = Histology), alpha = 0.7) +
guides(fill = "none") +
# scale_y_continuous(breaks = seq(0, 220, by = 20), labels = seq(0, 220, by = 20)) +
labs(y = "Number of cell lines", title = "Number of unique cell lines per histology across all annotated cell lines") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
bar_ccl_per_hist
bar_ccl_per_hist <- ggplot(data = unique(select(auc_all, Cell_line, Histology))) +
geom_bar(aes(x = Histology, fill = Histology), alpha = 0.7) +
guides(fill = "none") +
scale_y_continuous(breaks = seq(0, 375, by = 25), labels = seq(0, 375, by = 25)) +
labs(y = "Number of cell lines", title = "Number of unique cell lines per histology across all annotated cell lines") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
bar_ccl_per_hist
ggsave("./omix/pozdeyev_unmatched/barplot_ccl_per_histology.png", bar_ccl_per_hist, device = "png", dpi = 450, width = 12, height = 8, units = "in")
histo_aucic50_per_db
View(ccl_histologies)
auc_wide <- dcast(auc, Cell_line + Histology + TCGA_classification + CCLE_Name + Broad_ID + WasDrugScreened ~ Drug_name_Database, value.var = "AUC_IC50", fun.aggregate = mean, fill = 1000000)
auc_wide[auc_wide == 1000000] <- ""
# auc_wide <- auc_wide %>% group_by(Cell_line, Histology, CCLE_Name, Broad_ID, WasDrugScreened) %>% summarise_all(list(trimws(paste(., collapse = ""))))
auc_wide[auc_wide == ""] <- NA
auc_all <- bind_rows(auc_wide, ccls_not_drugscreened)
auc_all <- add_column(auc_all, InCCLE = ifelse(auc_all$Cell_line %in% unique(ccle_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, InCTRP = ifelse(auc_all$Cell_line %in% unique(ctrp_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, InGDSC = ifelse(auc_all$Cell_line %in% unique(gdsc_poz$Cell_line), 1, 0), .after = "Broad_ID")
auc_all <- add_column(auc_all, WasCRISPRScreened = ifelse(auc_all$Broad_ID %in% crispr_meta$Broad_ID, 1, 0), .after = "WasDrugScreened")
auc_all <- add_column(auc_all, HasCopyNumberData = ifelse(auc_all$Broad_ID %in% unique(cn_melt$Broad_ID)[!is.na(unique(cn_melt$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
auc_all <- add_column(auc_all, HasGeneExpressionData = ifelse(auc_all$Broad_ID %in% unique(ge_melt$Broad_ID)[!is.na(unique(ge_melt$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
auc_all <- add_column(auc_all, HasMutationData = ifelse(auc_all$Broad_ID %in% unique(maf_df$Broad_ID)[!is.na(unique(maf_df$Broad_ID))], 1, 0), .after = "WasCRISPRScreened")
# auc_all[, -c(1:4)] <- apply(auc_all[, -c(1:4)], MARGIN = 2, FUN = as.numeric)
auc_all <- subset(auc_all, !(WasDrugScreened == 0 & WasCRISPRScreened == 0 & HasMutationData == 0 & HasGeneExpressionData == 0 & HasCopyNumberData == 0))
write.csv.gz(auc_all, file = "./data_munging/pozdeyev2016/merged_auc_v20190408.5.csv.gz", row.names = FALSE, na = "NA")
length(unique(auc_all))
length(unique(auc_all$Cell_line))
auc_all <- read.delim("./data_munging/pozdeyev2016/merged_auc_v20190408.5.csv.gz", sep = ",", check.names = FALSE)
# Unique drugs across all datasets
length(unique(sapply(strsplit(as.character(colnames(auc_all)[13:length(colnames(auc_all))]), split = "_"), function(x) x[1])))
sum(auc_all$HasCopyNumberData)
sum(auc_all$HasMutationData)
sum(auc_all$HasGeneExpressionData)
sum(auc_all$WasDrugScreened)
test <- filter(auc_all, HasMutationData == 1)[, 1:12]
pgx_ccls <- filter(auc_all, WasDrugScreened == 1)
crispr_ccls <- filter(auc_all, WasCRISPRScreened == 1)
unscreened_ccls <- filter(auc_all, WasCRISPRScreened == 0 & WasDrugScreened == 0)
ge_ccls <- filter(auc_all, HasGeneExpressionData == 1)
cn_ccls <- filter(auc_all, HasCopyNumberData == 1)
mut_ccls <- filter(auc_all, HasMutationData == 1)
all_omics_ccls <- intersect(intersect(unique(ge_ccls$Cell_line), unique(cn_ccls$Cell_line)), unique(mut_ccls$Cell_line))
sum(filter(auc_all, Cell_line %in% all_omics_ccls)$WasDrugScreened)
ccle_ccls <- filter(auc_all, InCCLE == 1)
ctrp_ccls <- filter(auc_all, InCTRP == 1)
gdsc_ccls <- filter(auc_all, InGDSC == 1)
auc_all %>% count(Histology)
write.csv.gz(auc_all, file = "./data_munging/pozdeyev2016/merged_auc_v20190408.5.csv.gz", row.names = FALSE, na = "NA")
getwd
getwd()
setwd("/Users/claris01/Box Sync/SallyProjects/htscreens/omix")
getwd()
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# num_cores <- parallel::detectCores()
options(mc.cores = parallel::detectCores(), expressions = 5e5)
setwd("/Users/claris01/Box Sync/SallyProjects/htscreens/omix")
getwd()
setwd("/Users/claris01/Box\ Sync/SallyProjects/htscreens/omix")
getwd()
set.seed(1234)
setwd("/Users/claris01/Box\ Sync/SallyProjects/htscreens/omix")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# num_cores <- parallel::detectCores()
options(mc.cores = parallel::detectCores(), expressions = 5e5)
library(crunch)
library(ggpubr)
library(ggrepel)
library(ggsignif)
library(kableExtra)
library(naniar)
library(openxlsx)
library(reshape2)
library(tidyverse)
library(VennDiagram)
theme_set(theme_light())
ccl_info <- read.delim("./data/DepMap/DepMap-2019q1-celllines_v2_20190305.csv", sep = ",", header = TRUE, na.strings = c("", NA))
ccl_info <- subset(ccl_info, Primary.Disease != "unknown" & Primary.Disease != "primary cells" & !grepl("MERGED", CCLE_Name, fixed = TRUE))
ccl_info$Cell_line <- as.character(lapply(ccl_info$CCLE_Name, function(x) strsplit(as.character(x), split = "_")[[1]][1]))
ccl_info$Histology <- tolower(gsub("^[a-z0-9]*_", "", ccl_info$CCLE_Name, ignore.case = TRUE))
# Convert Primary.Disease entries to all lower case to fix factorization issue
ccl_info$Primary.Disease <- as.factor(tolower(ccl_info$Primary.Disease))
# Harmonize ID column name
colnames(ccl_info)[colnames(ccl_info) == "DepMap_ID"] <- "Broad_ID"
# Remove two rows that contain cell lines with two different histologies
# The histologies that are kept are verified through matching in Cellosaurus and Cell Model Passports
# KMH2, haematopoietic_and_lymphoid: https://web.expasy.org/cellosaurus/CVCL_1330, https://cellmodelpassports.sanger.ac.uk/passports/SIDM01018
# MS1, lung: https://web.expasy.org/cellosaurus/CVCL_1429, https://cellmodelpassports.sanger.ac.uk/passports/SIDM00245
ccl_info <- subset(ccl_info, CCLE_Name != "KMH2_THYROID" & CCLE_Name != "MS1_SKIN")
tcga_hist_converter <- read.xlsx("./data/TCGA/Histology_DepMap_Xena_04052019.xlsx", sheet = 3, startRow = 1, colNames = TRUE, rowNames = FALSE)
tcga_hist_converter$data_source <- NULL
tcga_hist_converter_depmap <- filter(tcga_hist_converter, grepl("^ACH", sample_ID))
tcga_hist_converter_tcga <- filter(tcga_hist_converter, grepl("^TCGA", sample_ID))
colnames(tcga_hist_converter_depmap) <- c("Broad_ID", "TCGA_classification")
colnames(tcga_hist_converter_tcga) <- c("sample", "TCGA_classification")
ccl_info <- merge(ccl_info, tcga_hist_converter_depmap, by = "Broad_ID", all.x = TRUE)
maf_df <- readRDS("./../data_munging/19Q1/maf_df_19Q1.rds")
cn_melt <- readRDS("./../data_munging/19Q1/cn_melt_19Q1.rds")
ge_melt <- readRDS("./../data_munging/19Q1/ge_melt_19Q1.rds")
# Sample info from figshare
crispr_meta <- read.delim("./data/DepMap/sample_info_20190306.csv", sep = ",", header = TRUE, na.strings = c("", NA))
colnames(crispr_meta)[colnames(crispr_meta) == "CCLE_name"] <- "CCLE_Name"
# crispr <- read.delim("./../data_munging/19Q1/gene_effect_corrected_20190305.csv.gz", sep = ",", check.names = FALSE, header = TRUE)
ccl_histologies <- select(ccl_info, Cell_line, Histology, TCGA_classification, CCLE_Name, Broad_ID) %>% drop_na(Cell_line)
# Account for cell line aliases and missing histologies
auc_na_histologies <- read.delim("./data/pozdeyev2016/auc_na_histologies.csv", sep = ",", row.names = 1)
auc_na_histologies$accession_id <- NULL
auc_na_histologies$Notes <- NULL
auc_na_histologies$Histology <- ifelse(auc_na_histologies$Histology == "", NA, as.character(auc_na_histologies$Histology))
auc_na_histologies$CCLE_Name <- ifelse(auc_na_histologies$CCLE_Name  == "", NA, as.character(auc_na_histologies$CCLE_Name ))
auc_na_histologies$Broad_ID <- ifelse(auc_na_histologies$Broad_ID == "", NA, as.character(auc_na_histologies$Broad_ID))
ccl_histologies <- subset(ccl_histologies, !(Broad_ID %in% auc_na_histologies$Broad_ID))
# Bind DepMap histologies and curated histologies
ccl_histologies <- bind_rows(ccl_histologies, auc_na_histologies)
auc_all <- read.delim("./data/pozdeyev2016/merged_auc_v20190408.5.csv.gz", sep = ",", check.names = FALSE)
# Unique drugs across all datasets
length(unique(sapply(strsplit(as.character(colnames(auc_all)[13:length(colnames(auc_all))]), split = "_"), function(x) x[1])))
sum(auc_all$HasCopyNumberData)
sum(auc_all$HasMutationData)
sum(auc_all$HasGeneExpressionData)
sum(auc_all$WasDrugScreened)
test <- filter(auc_all, HasMutationData == 1)[, 1:12]
pgx_ccls <- filter(auc_all, WasDrugScreened == 1)
crispr_ccls <- filter(auc_all, WasCRISPRScreened == 1)
unscreened_ccls <- filter(auc_all, WasCRISPRScreened == 0 & WasDrugScreened == 0)
ge_ccls <- filter(auc_all, HasGeneExpressionData == 1)
cn_ccls <- filter(auc_all, HasCopyNumberData == 1)
mut_ccls <- filter(auc_all, HasMutationData == 1)
all_omics_ccls <- intersect(intersect(unique(ge_ccls$Cell_line), unique(cn_ccls$Cell_line)), unique(mut_ccls$Cell_line))
sum(filter(auc_all, Cell_line %in% all_omics_ccls)$WasDrugScreened)
ccle_ccls <- filter(auc_all, InCCLE == 1)
ctrp_ccls <- filter(auc_all, InCTRP == 1)
gdsc_ccls <- filter(auc_all, InGDSC == 1)
auc_all %>% count(Histology)
getwd()
ge_depmap <- read.delim("./../../htscreens_giant_files/omix/GE/GE_DepMap_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
colnames(ge_depmap)[1:3]
ge_depmap$data_source <- NULL
colnames(ge_depmap)[1:]
colnames(ge_depmap)[1:2]
colnames(ge_depmap)[colnames(ge_depmap) == "cancer"] <- "TCGA_classification"
ge_depmap_melt <- melt(ge_depmap, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_depmap)[3:length(colnames(ge_depmap))], variable.name = "Gene", value.name = "TPM")
ge_tcga <- read.delim("./../../htscreens_giant_files/omix/GE/GE_Xena_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
ge_tcga$data_source <- NULL
colnames(ge_tcga)[colnames(ge_tcga) == "cancer"] <- "TCGA_classification"
ge_tcga_melt <- melt(ge_tcga, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_tcga)[3:length(colnames(ge_tcga))], variable.name = "Gene", value.name = "TPM")
setdiff(unique(ge_tcga_melt$Gene), unique(ge_depmap_melt$Gene))
interact(unique(ge_tcga_melt$Gene), unique(ge_depmap_melt$Gene))
intersect(unique(ge_tcga_melt$Gene), unique(ge_depmap_melt$Gene))
length(intersect(unique(ge_tcga_melt$Gene), unique(ge_depmap_melt$Gene)))
ge_depmap[, 3:ncol(ge_depmap)] <- apply(ge_depmap[, 3:ncol(ge_depmap)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
colnames(ge_depmap)[colnames(ge_depmap) == "cancer"] <- "TCGA_classification"
ge_depmap_melt <- melt(ge_depmap, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_depmap)[3:length(colnames(ge_depmap))], variable.name = "Gene", value.name = "TPM")
ge_depmap_melt <- melt(ge_depmap, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_depmap)[3:length(colnames(ge_depmap))], variable.name = "Gene", value.name = "TPM_scaled")
ge_depmap_bygene <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean = mean)
ge_depmap_bygene <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(mean = Mean)
ge_depmap_bygene <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean = mean)
ge_depmap_bygene <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
View(ge_depmap_bygene)
ge_tcga <- read.delim("./../../htscreens_giant_files/omix/GE/GE_Xena_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
ge_tcga$data_source <- NULL
colnames(ge_tcga)[colnames(ge_tcga) == "cancer"] <- "TCGA_classification"
# Mean center scale
ge_tcga[, 3:ncol(ge_tcga)] <- apply(ge_tcga[, 3:ncol(ge_tcga)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)]
# Mean center scale
ge_tcga[, 3:ncol(ge_tcga)] <- apply(ge_tcga[, 3:ncol(ge_tcga)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
ge_tcga_melt <- melt(ge_tcga, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_tcga)[3:length(colnames(ge_tcga))], variable.name = "Gene", value.name = "TPM_scaled")
# Average scaled TPM per gene per TCGA classification
ge_tcga_bygene <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
View(ge_tcga_bygene)
# Average scaled TPM per gene per TCGA classification
ge_tcga_bygene <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM_TCGA = mean(TPM_scaled))
# Average scaled TPM per gene per TCGA classification
ge_depmap_bygene <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM_DepMap = mean(TPM_scaled))
ge4corr <- merge(ge_depmap_bygene, ge_tcga_bygene, by = c("TCGA_classification", "Gene"), all = TRUE)
View(ge4corr)
ggplot(data = filter(ge4corr, TCGA_classification == "BLCA"), aes(x = Mean_TPM_DepMap, y = Mean_TPM, TCGA)) +
geom_point()
ggplot(data = filter(ge4corr, TCGA_classification == "BLCA"), aes(x = Mean_TPM_DepMap, y = Mean_TPM_TCGA)) +
geom_point()
ge_corr <- ge4corr %>% group_by(TCGA_classification) %>% summarize(corr = cor.test(y = Score, x = RPKM, method = "pearson", use = "complete.obs")$estimate, Metric = "Gene Expression")
ge_corr <- ge4corr %>% group_by(TCGA_classification) %>% summarize(corr = cor.test(y = Mean_TPM_TCGA, x = Mean_TPM_DepMap, method = "pearson", use = "complete.obs")$estimate, Metric = "Gene Expression")
View(ge_corr)
ge_corr <- ge4corr %>% group_by(TCGA_classification) %>% summarize(corr_DxT = cor.test(y = Mean_TPM_TCGA, x = Mean_TPM_DepMap, method = "pearson", use = "complete.obs")$estimate, corr_TxD = cor.test(y = Mean_TPM_DepMap, x = Mean_TPM_TCGA, method = "pearson", use = "complete.obs")$estimate)
ge_corr <- ge4corr %>% group_by(TCGA_classification) %>% summarize(corr = cor.test(y = Mean_TPM_TCGA, x = Mean_TPM_DepMap, method = "pearson", use = "complete.obs")$estimate)
# Average scaled TPM per gene per TCGA classification
ge_depmap_avg <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM_DepMap = mean(TPM_scaled))
rm(ge_tcga_bygene)
rm(ge_DepMap_bygene)
rm(ge_depmap_bygene)
# Average scaled TPM per gene per TCGA classification
ge_tcga_avg <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM_TCGA = mean(TPM_scaled))
View(ge_tcga_avg)
View(ge_tcga[,1:5])
View(ge_depmap[,1:5])
View(ge_tcga_melt)
View(ge_depmap_melt)
View(ge_tcga_avg)
# Split melted dataframe into list by TCGA classification
ge_depmap_list <- ge_depmap_melt %>% group_split(TCGA_classification)
ge_depmap_list[[1]]
unique(ge_depmap_melt$TCGA_classification)
levels(ge_depmap_melt$TCGA_classification)
names(ge_depmap_list) <- levels(ge_depmap_melt$TCGA_classification)
test <- ge_depmap_list[[1]]
View(test)
test_wide <- dcast(test, sample_ID + Gene ~ TCGA_classification, value.var = "TPM_scaled", fun.aggregate = mean)
test_wide <- dcast(test, Gene ~ sample_ID, value.var = "TPM_scaled", fun.aggregate = mean)
View(test_wide)
test_w_avg <- merge(ge_depmap_avg, test_wide, by = "Gene")
View(test_w_avg)
name(ge_depmap_list[[1]])
name(ge_depmap_list[1])
names(ge_depmap_list[1])
names(ge_depmap_list[[1]])
names(ge_depmap_list[1])
test_name <- names(ge_depmap_list[1])
# Average scaled TPM per gene per TCGA classification
ge_tcga_avg <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
# Average scaled TPM per gene per TCGA classification
ge_depmap_avg <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
test_w_avg <- merge(select(filter(ge_tcga_avg, TCGA_classification == test_name), Gene, Mean_TPM), test_wide, by = "Gene")
View(test_w_avg)
test_tcga_avg <- select(filter(ge_tcga_avg, TCGA_classification == test_name), Gene, Mean_TPM)
View(test_tcga_avg)
test_wide <- dcast(test, Gene ~ sample_ID, value.var = "TPM_scaled", fun.aggregate = mean)
rownames(test_wide) <- test_wide$Gene
test_wide$Gene <- NULL
test_corr <- apply(test_wide, MARGIN = 2, FUN = function(sample) cor.test(x = test_tcga_avg$Mean_TPM, y = sample, method = "pearson", use = "complete.obs")$estimate)
test_corr
mean(test_corr)
View(ge4corr)
View(ge_corr)
View(ge_depmap_avg)
# DepMap gene expression
ge_depmap <- read.delim("./../../htscreens_giant_files/omix/GE/GE_DepMap_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
unique(ge_depmap$data_source)
# DepMap gene expression
ge_depmap <- read.delim("./../../htscreens_giant_files/omix/GE/GE_DepMap_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
colnames(ge_depmap)[colnames(ge_depmap) == "cancer"] <- "TCGA_classification"
# Mean center scale
ge_depmap[, 4:ncol(ge_depmap)] <- apply(ge_depmap[, 4:ncol(ge_depmap)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)]
ge_depmap[, 4:ncol(ge_depmap)] <- apply(ge_depmap[, 4:ncol(ge_depmap)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
# Melt
ge_depmap_melt <- melt(ge_depmap, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_depmap)[4:length(colnames(ge_depmap))], variable.name = "Gene", value.name = "TPM_scaled")
# Average scaled TPM per gene per TCGA classification
ge_depmap_avg <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
# TCGA gene expression
ge_tcga <- read.delim("./../../htscreens_giant_files/omix/GE/GE_Xena_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
colnames(ge_tcga)[colnames(ge_tcga) == "cancer"] <- "TCGA_classification"
# Mean center scale
ge_tcga[, 4:ncol(ge_tcga)] <- apply(ge_tcga[, 4:ncol(ge_tcga)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
# Melt
ge_tcga_melt <- melt(ge_tcga, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_tcga)[4:length(colnames(ge_tcga))], variable.name = "Gene", value.name = "TPM_scaled")
# Average scaled TPM per gene per TCGA classification
ge_tcga_avg <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
View(ge_tcga_avg)
# Make wide
ge_depmap_wide <- dcast(data = ge_depmap_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean, value.var = Mean_TPM)
# Make wide
ge_depmap_wide <- dcast(data = ge_depmap_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean, value.var = Mean_TPM)
# Average scaled TPM per gene per TCGA classification
ge_depmap_avg <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
# Make wide
ge_depmap_wide <- dcast(data = ge_depmap_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean, value.var = Mean_TPM)
# Make wide
ge_depmap_wide <- dcast(data = ge_depmap_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean)
View(ge_depmap_wide)
rownames(ge_depmap_wide) <- ge_depmap_wide$Gene
ge_depmap_wide$Gene <- NULL
tcga
ge_tcga_wide <- dcast(data = ge_tcga_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean)
rownames(ge_tcga_wide) <- ge_tcga_wide$Gene
ge_tcga_wide$Gene <- NULL
View(ge_tcga_wide)
colnames(ge_depmap_wide) <- paste(colnames(ge_depmap_wide), "DepMap", sep = "_")
colnames(ge_tcga_wide) <- paste(colnames(ge_tcga_wide), "DepMap", sep = "_")
ge_wide <- bind_cols(ge_depmap_wide, ge_tcga_wide)
View(ge_wide)
ge_tcga_wide <- dcast(data = ge_tcga_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean)
rownames(ge_tcga_wide) <- ge_tcga_wide$Gene
ge_tcga_wide$Gene <- NULL
colnames(ge_tcga_wide) <- paste(colnames(ge_tcga_wide), "TCGA", sep = "_")
ge_wide <- bind_cols(ge_depmap_wide, ge_tcga_wide)
ge_wide_corr <- ge_wide %>% as.matrix %>% cor %>% as.data.frame %>% rownames_to_column(var = "test") %>% gather(var2, value, -var1)
ge_wide_corr <- ge_wide %>% as.matrix %>% cor %>% as.data.frame %>% rownames_to_column(var = "test") %>% gather(var2, value, -test)
View(ge_wide_corr)
ge_wide_corr <- ge_wide %>% as.matrix %>% cor %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)))
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_wide_corr <- apply(ge_wide_corr, 2, function(x) gsub("_TCGA|_DepMap","", x))
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_wide_corr <- unique(apply(ge_wide_corr, 2, function(x) gsub("_TCGA|_DepMap","", x)))
length(unique(ge_tcga_avg$TCGA_classification))
length(unique(ge_depmap_avg$TCGA_classification))
# DepMap gene expression
ge_depmap <- read.delim("./../../htscreens_giant_files/omix/GE/GE_DepMap_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
colnames(ge_depmap)[colnames(ge_depmap) == "cancer"] <- "TCGA_classification"
# Mean center scale
ge_depmap[, 4:ncol(ge_depmap)] <- apply(ge_depmap[, 4:ncol(ge_depmap)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
# Melt
ge_depmap_melt <- melt(ge_depmap, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_depmap)[4:length(colnames(ge_depmap))], variable.name = "Gene", value.name = "TPM_scaled")
# Average scaled TPM per gene per TCGA classification
ge_depmap_avg <- ge_depmap_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
# Make wide
ge_depmap_wide <- dcast(data = ge_depmap_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean)
rownames(ge_depmap_wide) <- ge_depmap_wide$Gene
ge_depmap_wide$Gene <- NULL
colnames(ge_depmap_wide) <- paste(colnames(ge_depmap_wide), "DepMap", sep = "_")
# TCGA gene expression
ge_tcga <- read.delim("./../../htscreens_giant_files/omix/GE/GE_Xena_filter.csv.gz", sep = ",", header = TRUE, check.names = FALSE)
colnames(ge_tcga)[colnames(ge_tcga) == "cancer"] <- "TCGA_classification"
# Mean center scale
ge_tcga[, 4:ncol(ge_tcga)] <- apply(ge_tcga[, 4:ncol(ge_tcga)], MARGIN = 2, FUN = scale, center = TRUE, scale = TRUE)
# Melt
ge_tcga_melt <- melt(ge_tcga, id.vars = c("sample_ID", "TCGA_classification"), measure.vars = colnames(ge_tcga)[4:length(colnames(ge_tcga))], variable.name = "Gene", value.name = "TPM_scaled")
# Average scaled TPM per gene per TCGA classification
ge_tcga_avg <- ge_tcga_melt %>% group_by(TCGA_classification, Gene) %>% summarise(Mean_TPM = mean(TPM_scaled))
# Make wide
ge_tcga_wide <- dcast(data = ge_tcga_avg, formula = Gene ~ TCGA_classification, fun.aggregate = mean)
rownames(ge_tcga_wide) <- ge_tcga_wide$Gene
ge_tcga_wide$Gene <- NULL
colnames(ge_tcga_wide) <- paste(colnames(ge_tcga_wide), "TCGA", sep = "_")
ge_wide <- bind_cols(ge_depmap_wide, ge_tcga_wide)
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_wide_corr <- unique(apply(ge_wide_corr, 2, function(x) gsub("_TCGA|_DepMap","", x)))
# ge4corr <- merge(ge_depmap_avg, ge_tcga_avg, by = c("TCGA_classification", "Gene"), all = TRUE)
# ge_corr <- ge4corr %>% group_by(TCGA_classification) %>% summarize(corr = cor.test(y = Mean_TPM_TCGA, x = Mean_TPM_DepMap, method = "pearson", use = "complete.obs")$estimate)
View(ge_wide_corr)
colnames(ge_wide)
ge_wide_corr <- apply(ge_wide_corr, 2, function(x) gsub("_TCGA|_DepMap","", x))
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_wide_corr <- apply(ge_wide_corr, 2, function(x) gsub("_TCGA|_DepMap","", x))
ge_wide_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_wide_corr <- filter(ge_wide_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_corr <- ge_wide %>% as.matrix %>% cor(method = "pearson") %>% as.data.frame %>% rownames_to_column(var = "var1") %>% gather(var2, value, -var1)
ge_corr <- filter(ge_corr, !(grepl("DepMap", var1) & grepl("DepMap", var2)) & !(grepl("TCGA", var1) & grepl("TCGA", var2)))
ge_corr_wide <- dcast(ge_corr, formula = var1 ~ varr2, fun.aggregate = mean)
ge_corr_wide <- dcast(ge_corr, formula = var1 ~ var2, fun.aggregate = mean)
View(ge_corr_wide)
